What happens when you initialize a repository? Why do you need to do it?

the git meta data appears, but no actual commits or tracking occurs. I guess it tells git that you want to start tracking somethign in the directory, but not exactly what. you have to tell git which files you'd like it to track after that.


How is the staging area different from the working directory and the repository? What value do you think it offers?

mainly the opportunity to rethink your decisions

the staging area is the area between the working directory and the repository.

How can you use the staging area to make sure you have one commit per logical change?

basically you can use git diff to check that you're only commiting a small amount of stuff.

also maybe if you added something to the staging area but didn't commit it you'll want to check it to make sure that it's not the exactly same thing as you just did


What are some situations when branches would be helpful in keeping your history organized? How would branches help?

uh imagine mixing all the pages of 2 books together. branches are like, if you had 2 separate timelines split off,creating 2 different stories, and you were smart and kept them separate so you could track them, instead of reading 2 completely different stories (which unhelpfully have very similar occurences 
and characters)
branches are useful whenever you want to do anything different or test anything out

how do diagrams help you visualise branch structure

the connectiosn are particularly helpful. the connected commits are in chronological order, each with one logical change, as long as you've been commiting in a sensible fashion.

this sort of question always confuses me. they help you visualise the branch structure by showing you a visual model of the branch structure, connecting those commits which are on teh same branch in chronological order, adn showing where each branch diverges fromteh master. I guess that is what it was asking??

my instinct is to then go on to say "and I can then translate that into my head directly by way of my eyes" but I guess that's silly.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?


the separate files become one set of files in the next commit, and they become one branch again. They become the master branch if the master was one of the branches to be merged. Everything taken away by a coder remains removed, everything added by a coder remains added. the previous commits in the separate branches are still accessible, and both branches are seen in the git log, in chronological order, regardless of the original branch.





